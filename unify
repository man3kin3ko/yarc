#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
unify_usage() {
  if [[ -n $long_usage ]]; then
    printf "unify - Creates flatten ip:hostname list for OSINT pipelining\n"
    echo

  else
    printf "unify - Creates flatten ip:hostname list for OSINT pipelining\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  unify COMMAND\n"
  printf "  unify [COMMAND] --help | -h\n"
  printf "  unify --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Resolve hostnames into IP addresses\n" "resolve"
  printf "  %s   Recon for possible hostnames for a given IP\n" "reverse"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
unify_resolve_usage() {
  if [[ -n $long_usage ]]; then
    printf "unify resolve - Resolve hostnames into IP addresses\n"
    echo

  else
    printf "unify resolve - Resolve hostnames into IP addresses\n"
    echo

  fi

  printf "Alias: res\n"
  echo

  printf "%s\n" "Usage:"
  printf "  unify resolve HOSTNAMES_LIST [OPTIONS]\n"
  printf "  unify resolve --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--mapfile, -m"
    printf "    Use mapfile instead of read (can cause compatibility issues, but generally\n    faster)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "HOSTNAMES_LIST"
    printf "    Pipeline generated list of hostnames\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  unify resolve domains-resolved.txt\n"
    printf "  unify res -m domains-resolved.txt\n"
    echo

  fi
}

# :command.usage
unify_reverse_usage() {
  if [[ -n $long_usage ]]; then
    printf "unify reverse - Recon for possible hostnames for a given IP\n"
    echo

  else
    printf "unify reverse - Recon for possible hostnames for a given IP\n"
    echo

  fi

  printf "Alias: rev\n"
  echo

  printf "%s\n" "Usage:"
  printf "  unify reverse IPS_LIST NAME_FILE [OPTIONS]\n"
  printf "  unify reverse --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--mapfile, -m"
    printf "    Use mapfile instead of read (can cause compatibility issues, but generally\n    faster)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "IPS_LIST"
    printf "    Pipeline generated list of IP addresses\n"
    echo

    # :argument.usage
    printf "  %s\n" "NAME_FILE"
    printf "    domain:ip list\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  unify reverse -m white-ip.txt domains-unify.txt\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
unify_resolve_command() {
  # src/resolve_command.sh
  if [[ -n "${args[--mapfile]}" ]]; then
      mapfile -t DOMAINS < ${args[hostnames_list]};
      for value in "${DOMAINS[@]}"; do
          dig +noall +answer $value | awk '{print $5}' | xargs -L1 echo "$value";
      done
  else
      while IFS= read -r value; do
          dig +noall +answer $value | awk '{print $5}' | xargs -L1 echo "$value";
      done < ${args[hostnames_list]}
  fi
}

# :command.function
unify_reverse_command() {
  # src/reverse_command.sh
  if [[ -n "${args[--mapfile]}" ]]; then
      mapfile -t DOMAINS < ${args[ips_list]};
      for value in "${DOMAINS[@]}"; do
          grep $value ${args[name_file]};
      done
  else
      while IFS= read -r value; do
          grep $value ${args[name_file]};
      done < ${args[ips_list]}
  fi
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        unify_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    resolve | res)
      action="resolve"
      shift
      unify_resolve_parse_requirements "$@"
      shift $#
      ;;

    reverse | rev)
      action="reverse"
      shift
      unify_reverse_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      unify_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
unify_resolve_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        unify_resolve_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="resolve"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --mapfile | -m)

        # :flag.case_no_arg
        args['--mapfile']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['hostnames_list']+x} ]]; then
          args['hostnames_list']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['hostnames_list']+x} ]]; then
    printf "missing required argument: HOSTNAMES_LIST\nusage: unify resolve HOSTNAMES_LIST [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
unify_reverse_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        unify_reverse_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="reverse"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --mapfile | -m)

        # :flag.case_no_arg
        args['--mapfile']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['ips_list']+x} ]]; then
          args['ips_list']=$1
          shift
        # :argument.case
        elif [[ -z ${args['name_file']+x} ]]; then
          args['name_file']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['ips_list']+x} ]]; then
    printf "missing required argument: IPS_LIST\nusage: unify reverse IPS_LIST NAME_FILE [OPTIONS]\n" >&2
    exit 1
  fi
  if [[ -z ${args['name_file']+x} ]]; then
    printf "missing required argument: NAME_FILE\nusage: unify reverse IPS_LIST NAME_FILE [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "resolve") unify_resolve_command ;;
    "reverse") unify_reverse_command ;;
  esac
}

initialize
run "$@"
